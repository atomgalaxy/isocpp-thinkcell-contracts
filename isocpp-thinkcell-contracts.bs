<pre class='metadata'>
Title: How think-cell Uses Contracts
Status: D
Audience: LEWG, EWG
Editor: Gašper Ažman <gasper.azman@gmail.com>
Editor: Arno Schödl <aschoedl@think-cell.com>
Shortname: DXXXX
Abstract: think-cell's product employs contract assertions to great effect. It would be a shame if the contracts feature in C++ didn't support their use pattern. This is a report on the pattern and its requirements.
Group: WG21
Date: 2019-04-06
Markup Shorthands: markdown yes
Revision: 3
ED: https://atomgalaxy.github.io/isocpp-thinkcell-contracts/isocpp-thinkcell-contracts.html
</pre>

<style>
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}

.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}

ul .std {
  list-style-type: none;
  padding-left: 0px;
}
</style>

<pre class='biblio'>
{
  "AS2019" : {
    "authors": [ "Arno Schödl" ],
    "href": "https://skillsmatter.com/skillscasts/13630-a-practical-approach-to-error-handling",
    "title": "A Practical Approach to Error Handling: Recording"
  },
  "ErrHdlSlides" : {
    "authors": [ "Arno Schödl" ],
    "href": "https://www.think-cell.com/en/career/talks/errorhandling/",
    "title": "A Practical Approach to Error Handling: Slides"
  }
}
</pre>


Status of This Document {#status}
=================================

This document is a field report and not a proposal. It is meant as a data-point
and input to the design effort regarding the contracts feature. Hopefully, it
will serve as a tie-breaker between various ways the design can go.

Specifically, it is meant to inform the design of the range of things available
to do from the contract violation handler.

This document was conceived when Gašper Ažman saw Arno Schödl's talk [[AS2019]]
([[ErrHdlSlides|slides]]).


Context of think-cell {#context}
================================

think-cell sells an add-on for Microsoft PowerPoint for use on client machines.
The work-product of the user and software is a PowerPoint document. Such a
document is correct by inspection. The worst-case scenario for the user is
crashing and losing work, which is mitigated by autosaving and backups. The
worst-cases for think-cell are losing customers and doing customer support.

Given that the product automates a lot of interaction with PowerPoint, rollback
of state is usually impossible on a per-action basis, so in practice the software must provide a no-fail guarantee.

For such a product context, the company has perfected a particular approach to
contracts and handling disappointment. This approach has worked extremely well,
allowed rapid code development and innovation, and deployment of code to
customers with contracts enabled. The developers and users are very happy with
it.

**This approach is not appropriate for all software.** It is, however,
extremely appropriate for the above context. We are trying to ensure the
contracts in C++ are flexible enough to accommodate this use-case, rather than advocating
for this to be the only use-case.


Approach in Nutshell {#nutshell}
================================

The program may stray from the *happy path* in many ways, but we can divide them
into two classes:

- Anticipated, **recoverable errors** that have a recovery path:
    - *Method*: control flow (throw an exception, ensure it's handled and
        recovery path engaged).
    - *Example*: file not found after *Open* dialog (eg. because of a race
        condition).
- **Contract violations**; or anticipated errors that are impossible to handle;
    or anticipated errors that do not yet have a recovery path:
    - *Method*: violation-level specific, see next section.
        Always continues, hence the `check_maybe_continue` semantic, specified
        explicitly as per [[P1429R0]]. Also possibly call home with infodump.

This document deals with the second class. The first class can be legitimately
thought-of as normal operation.

Design Rationale {#rationale}
=============================

This scheme optimizes for developers, followed by customer satisfaction;
developers have limited time, so effort should be spent on fixing and handling
errors that actually pose problems for users. Once a user gets an error, they
are inconvenienced regardless of the severity. The users are therefore best
served by fast bug-fixing and triage, because it allows for the best
prioritization of work.

In addition, developers in the wild often skip error checking because they do not
know what to do in the event of failure; at think-cell, checking is never
skipped &mdash; *recovery* is.

In other words: if you thought of a possible issue, write an `assert`. The
`assert` will get a recovery path if it is ever triggered and prioritized.

This means that all calls to Windows APIs get post-condition `assert`s. All function
preconditions get `assert`s. Everything gets an `assert`.

API errors in particular often point to non-local problems.
For example, resource acquisition may fail because of a resource leak elsewhere.
Time is better invested in finding the leak than in local recovery.

*Asserts also have bugs*: `check_maybe_continue` makes `assert` bugs a non-problem
for users. Once the software calls home with false-positive reports, the bugs
will be fixed. `check_maybe_continue` makes it far less risky to write and ship
`assert`s.

The Levels of Assertions {#leveling}
====================================

Levels with Undefined Behavior {#levels-UB}
------------------------------------------

These two levels are for asserts after which behavior is UB.

### Level 6: Immediate Crash Likely ### {#level6}

*Examples*: nullptr access, out-of-bounds access, failures of API calls that are expected to always succeed.

False alarms are unlikely at this level. nullptr access or out-of-bounds access is by definition incorrect.
API calls serve a purpose, so if they fail, the program is unlikely to work correctly.

*Response*:
-   Disable future reports (future behavior is UB, so further reports are
    meaningless)
-   On client machines
    - Collect and log info (core dump etc.) and call home / prepare email with that information.
    - Show error dialog, possibly with custom messages requested by the call home. This increases the chance of getting more info from the user.
-   On server
    - Notify the administrator.
    - Go into infinite loop and wait for a debugger to attach.


### Level 5: Program Behavior Undefined After Failure ### {#level5}

*Examples*: Assert failed (e.g., precondition violation), but assertions can have bugs, too;
failures of API calls where the actual error code is unexpected, but a different error code is
anticipated and handled: the anticipated error handling path may
happen to work for the unanticipated error.
Example: if opening a file already anticipates a missing file, but is encountering a denied access, the program is likely to continue
without crashing.

At this level, a false alarm or at least correct continuation despite the problem is possible, and we do not want to concern the user unnecessarily. Still, program behavior is UB afterwards.

*Response*:
-   Disable future reports (future behavior is UB, so further reports are
    meaningless)
-   On client machines
    - Collect and log info (core dump etc.) and call home.
    - *Do not show* error dialog, unless a custom message was requested by the call home.
-   On server
    - Notify the administrator.
    - Go into infinite loop and wait for a debugger to attach. This prioritizes developer friendliness over user experience.

If possible, *continue running*. Please *do* note the application context.
Bloomberg has the exact opposite approach here (always halt on contract
violations), *which is appropriate for their context*.


Levels with Defined Behavior {#levels-defined}
----------------------------------------------

Level 4 and below are for violations after which behavior is defined. All these
have a recovery path, therefore it is always possible to continue running after
diagnosis.

They differ in the way to respond to the assertion failure.

### Untested Situation ### {#level4}

*Examples*:
- A condition handled in legacy code but which there is no known reproduction.
    Maybe the handling code can be removed?
- A hooked API emitting an error that we transparently pass to the caller,
    but we have no reproduction for this error and it is unclear if the caller
    would correctly handle such an error.

This helps diagnose conditions that are known to be theoretically possible but
were never observed, so actual behavior is untested and the failure may be
a harbinger of more serious issues.

It also allows asking users how they came to this situation, so it can be
handled properly in the future.

*Response*:
-   Do not disable but throttle future reports to avoid excessive delays in
    program execution
-   On client machines
    - Collect and log info (core dump etc.) and call home.
    - *Do not show* error dialog, unless a custom message was requested by the
        call home.
-   On server
    - Notify the administrator


### User Experience Degraded ### {#level3}

*Examples*:
- A 3rd-party bug that is not completely mitigated

*Response*:
- Log (helps with resolving client complaints)
- Do not call home. We know the error exists, and will only address it further
    if we receive actual customer complaints.


### Possible user environment issue ### {#level2}

*Examples*: OS misconfiguration, broken PowerPoint installation, 3rd party
plugin that may or may not play nice in the future, etc.

*Response*:
- In regular operation, do not log. The problem is handled correctly, and if everything else works, we do not need to know.
- *unless*, during client remote support session, *display error dialog*,
    because tech support should know about this situation when dealing with a
    bigger issue that may or may not be related.

### Trace ### {#level1}

For exceptional but run-of-the-mill situations the developer wants to log in
debug.

*Example*: file-not-found when opening a file.

*Response*:
- Log if in debug mode or in a remote support session. Otherwise, do nothing.


Feature Requirements {#requirements}
====================================

The contracts support in C++, from afar, looks like it could be coerced to
support our use-cases eventually; however, given the various levels of
contracts, each with its own idea of what the violation handler needs to do, is
not obvious as to its implementation.

Likewise, getting core dumps and stack traces from the violation handler must be
at least possible for it to be useful at least for the [[#level4]] and above
CCSs.

Some assertions are wrapped into a special form, such as `TC_ASSERTEQUAL(x,y)`,
which checks `x==y`, but on failure includes the two values in the error report.


A Straw-Man Proposal {#proposal}
--------------------------------

A **straw-man proposal** that would enable the think-cell use-case might be to
make the return value of the predicate available through an additional accessor
on `std::contract_violation`, returning a reference to the type-erased value.
Of course, the value itself is required to be contextually convertible to
`bool`.

```
std::contract_violation {
  /* ... */
  std::any const& predicate_value() const {
   /* the std::any is exposition-only - this is probably doable without
      allocation */
   /* return the value the failed predicate returned */
  }
};

Consider this contrived example:

```cpp
void get_cursor_pos(int* x, int* y)
  [[expects check_maybe_continue: tc::level_6(x != null)]]
  [[expects check_maybe_continue: tc::level_6(y != null)]]
{
  POINT point;
  bool const success = GetCursorPos(&point);
  [[assert check_maybe_continue:
       tc::level_4(success, "unlikely GetCursorPos fail")]]
  if (!success) { // does this ever happen?
    point.x = 0;
    point.y = 0;
  }
  *x = point.x;
  *y = point.y;
}
```

If you would like to stay true to [[n4800]], mentally substitute
`check_maybe_continue` for `default`, which we would ensure to mean
`check_maybe_continue` at build time.

**The mechanism proposed above is very rudimentary**. However, it would get the
job done, for better or worse. This paper is about existing practice. The
authors implore the committee to come up with a solution.


FAQ {#FAQ}
==========

Can a CCS with an `check_maybe_continue` semantic introduce UB?  {#faq-ub}
-------------------------------------------------------------------------

No, but some committee members seem to think it can. It shouldn't be able to - a
`check_maybe_continue` semantic on a Contract Checking Statement (CCS) does not
allow the compiler to assume the CCS is true in the subsequent code.
